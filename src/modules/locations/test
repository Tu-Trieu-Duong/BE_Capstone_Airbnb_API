// // --- DTOs (location/dto/*.dto.ts) ---
// // CreateLocationDto
// import { ApiProperty } from '@nestjs/swagger';
// import { IsNotEmpty, IsOptional, IsString, IsBoolean } from 'class-validator';

// export class CreateLocationDto {
//   @ApiProperty({ example: 'Ho Chi Minh City' })
//   @IsNotEmpty()
//   @IsString()
//   name_location: string;

//   @ApiProperty({ example: 'Ho Chi Minh' })
//   @IsOptional()
//   @IsString()
//   province?: string;

//   @ApiProperty({ example: 'Vietnam' })
//   @IsOptional()
//   @IsString()
//   country?: string;
// }

// // UpdateLocationDto
// import { PartialType } from '@nestjs/swagger';
// export class UpdateLocationDto extends PartialType(CreateLocationDto) {}

// // FindAllLocationDto
// import { ApiPropertyOptional } from '@nestjs/swagger';
// import { IsOptional, IsString, IsNumber } from 'class-validator';
// import { Type } from 'class-transformer';

// export class FindAllLocationDto {
//   @IsOptional()
//   @Type(() => Number)
//   @IsNumber()
//   @ApiPropertyOptional({ example: 1 })
//   page?: number;

//   @IsOptional()
//   @Type(() => Number)
//   @IsNumber()
//   @ApiPropertyOptional({ example: 10 })
//   pageSize?: number;

//   @IsOptional()
//   @IsString()
//   @ApiPropertyOptional({
//     example: '{"name_location": "Hanoi", "country": "Vietnam"}',
//     description: 'Tìm kiếm theo nhiều trường bằng chuỗi JSON'
//   })
//   keyword?: string;
// }

// // --- Service (location/location.service.ts) ---
// import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';
// import { PrismaService } from '../prisma/prisma.service';
// import { CreateLocationDto, UpdateLocationDto, FindAllLocationDto } from './dto';
// import { cloudinary } from 'src/common/cloudinary/init.cloudinary';
// import * as path from 'path';
// import * as fs from 'fs';

// @Injectable()
// export class LocationService {
//   constructor(private prisma: PrismaService) {}

//   async create(dto: CreateLocationDto) {
//     const location = await this.prisma.locations.create({ data: dto });
//     return location;
//   }

//   async findAll(query: FindAllLocationDto) {
//     const { page = 1, pageSize = 10, keyword } = query;
//     let filters = {};

//     if (keyword) {
//       try {
//         const parsed = JSON.parse(keyword);
//         filters = Object.entries(parsed).reduce((acc, [key, value]) => {
//           if (value) acc[key] = { contains: value };
//           return acc;
//         }, {});
//       } catch {
//         throw new BadRequestException('Keyword phải là chuỗi JSON');
//       }
//     }

//     const totalItem = await this.prisma.locations.count({ where: filters });
//     const totalPage = Math.ceil(totalItem / pageSize);

//     const locations = await this.prisma.locations.findMany({
//       where: filters,
//       take: pageSize,
//       skip: (page - 1) * pageSize,
//       orderBy: { createdAt: 'desc' },
//     });

//     return { page, pageSize, totalItem, totalPage, items: locations };
//   }

//   async findOne(id: number) {
//     const location = await this.prisma.locations.findUnique({ where: { id } });
//     if (!location || location.isDeleted) throw new NotFoundException('Không tìm thấy vị trí');
//     return location;
//   }

//   async update(id: number, dto: UpdateLocationDto) {
//     await this.findOne(id); // đảm bảo tồn tại
//     return this.prisma.locations.update({ where: { id }, data: dto });
//   }

//   async remove(id: number, deletedBy: number) {
//     await this.findOne(id);
//     return this.prisma.locations.update({
//       where: { id },
//       data: { isDeleted: true, deletedAt: new Date(), deletedBy },
//     });
//   }

//   async uploadImage(file: Express.Multer.File, locationId: number) {
//     const location = await this.findOne(locationId);
//     if (!file) throw new BadRequestException('File không hợp lệ');

//     const result = await new Promise((resolve, reject) => {
//       cloudinary.uploader.upload_stream(
//         { folder: 'locations' },
//         (error, result) => {
//           if (error) return reject(error);
//           resolve(result);
//         },
//       ).end(file.buffer);
//     });

//     await this.prisma.locations.update({
//       where: { id: locationId },
//       data: { picture: result.secure_url },
//     });

//     return { id: locationId, imageUrl: result.secure_url };
//   }
// }

// // --- Controller (location/location.controller.ts) ---
// import {
//   Controller, Get, Post, Body, Param, Delete, Query,
//   Put, ParseIntPipe, UploadedFile, UseInterceptors, UseGuards
// } from '@nestjs/common';
// import { LocationService } from './location.service';
// import {
//   CreateLocationDto,
//   UpdateLocationDto,
//   FindAllLocationDto
// } from './dto';
// import { ApiBearerAuth, ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger';
// import { FileInterceptor } from '@nestjs/platform-express';
// import { memoryStorage } from 'multer';
// import { User } from 'src/common/decorator/user.decorator';
// import { users } from 'generated/prisma';

// @ApiTags('locations')
// @ApiBearerAuth()
// @Controller('locations')
// export class LocationController {
//   constructor(private readonly service: LocationService) {}

//   @Post()
//   create(@Body() dto: CreateLocationDto) {
//     return this.service.create(dto);
//   }

//   @Get()
//   findAll(@Query() query: FindAllLocationDto) {
//     return this.service.findAll(query);
//   }

//   @Get(':id')
//   findOne(@Param('id', ParseIntPipe) id: number) {
//     return this.service.findOne(id);
//   }

//   @Put(':id')
//   update(@Param('id', ParseIntPipe) id: number, @Body() dto: UpdateLocationDto) {
//     return this.service.update(id, dto);
//   }

//   @Delete(':id')
//   remove(@User() user: users, @Param('id', ParseIntPipe) id: number) {
//     return this.service.remove(id, user.id);
//   }

//   @Post('upload/:id')
//   @ApiConsumes('multipart/form-data')
//   @ApiBody({
//     schema: {
//       type: 'object',
//       properties: {
//         file: { type: 'string', format: 'binary' },
//       },
//     },
//   })
//   @UseInterceptors(FileInterceptor('file', { storage: memoryStorage() }))
//   upload(@UploadedFile() file: Express.Multer.File, @Param('id', ParseIntPipe) id: number) {
//     return this.service.uploadImage(file, id);
//   }
// }
